{
  "version": 3,
  "sources": ["../../jquery-datatables-checkboxes/js/dataTables.checkboxes.js"],
  "sourcesContent": ["/*!\r\n * jQuery DataTables Checkboxes (https://www.gyrocode.com/projects/jquery-datatables-checkboxes/)\r\n * Checkboxes extension for jQuery DataTables\r\n *\r\n * @version     1.2.14\r\n * @author      Gyrocode LLC (https://www.gyrocode.com)\r\n * @copyright   (c) Gyrocode LLC\r\n * @license     MIT\r\n */\r\n(function( factory ){\r\n/* eslint-disable */\r\n   if ( typeof define === 'function' && define.amd ) {\r\n      // AMD\r\n      define( ['jquery', 'datatables.net'], function ( $ ) {\r\n         return factory( $, window, document );\r\n      } );\r\n   }\r\n   else if ( typeof exports === 'object' ) {\r\n      // CommonJS\r\n      module.exports = function (root, $) {\r\n         if ( ! root ) {\r\n            root = window;\r\n         }\r\n\r\n         if ( ! $ || ! $.fn.dataTable ) {\r\n            $ = require('datatables.net')(root, $).$;\r\n         }\r\n\r\n         return factory( $, root, root.document );\r\n      };\r\n   }\r\n   else {\r\n      // Browser\r\n      factory( jQuery, window, document );\r\n   }\r\n/* eslint-enable */\r\n}(function( $, window, document ) {\r\n   'use strict';\r\n   var DataTable = $.fn.dataTable;\r\n\r\n\r\n   /**\r\n   * Checkboxes is an extension for the jQuery DataTables library that provides\r\n   * universal solution for working with checkboxes in a table.\r\n   *\r\n   *  @class\r\n   *  @param {object} settings DataTables settings object for the host table\r\n   *  @requires jQuery 1.7+\r\n   *  @requires DataTables 1.10.8+\r\n   *\r\n   *  @example\r\n   *     $('#example').DataTable({\r\n   *        'columnDefs': [\r\n   *           {\r\n   *              'targets': 0,\r\n   *              'checkboxes': true\r\n   *           }\r\n   *        ]\r\n   *     });\r\n   */\r\n   var Checkboxes = function ( settings ) {\r\n      // Sanity check that we are using DataTables 1.10.8 or newer\r\n      if ( ! DataTable.versionCheck || ! DataTable.versionCheck( '1.10.8' ) ) {\r\n         throw 'DataTables Checkboxes requires DataTables 1.10.8 or newer';\r\n      }\r\n\r\n      this.s = {\r\n         dt: new DataTable.Api( settings ),\r\n         columns: [],\r\n         data: {},\r\n         dataDisabled: {},\r\n         ignoreSelect: false\r\n      };\r\n\r\n      // Get settings object\r\n      this.s.ctx = this.s.dt.settings()[0];\r\n\r\n      // Check if checkboxes have already been initialised on this table\r\n      if ( this.s.ctx.checkboxes ) {\r\n         return;\r\n      }\r\n\r\n      settings.checkboxes = this;\r\n\r\n      this._constructor();\r\n   };\r\n\r\n\r\n   Checkboxes.prototype = {\r\n      /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n      * Constructor\r\n      */\r\n\r\n      /**\r\n      * Initialise the Checkboxes instance\r\n      *\r\n      * @private\r\n      */\r\n      _constructor: function ()\r\n      {\r\n         var self = this;\r\n         var dt = self.s.dt;\r\n         var ctx = self.s.ctx;\r\n         var hasCheckboxes = false;\r\n         var hasCheckboxesSelectRow = false;\r\n\r\n         for(var i = 0; i < ctx.aoColumns.length; i++){\r\n            if (ctx.aoColumns[i].checkboxes){\r\n               var $colHeader = $(dt.column(i).header());\r\n\r\n               //\r\n               // INITIALIZATION\r\n               //\r\n\r\n               hasCheckboxes = true;\r\n\r\n               if(!$.isPlainObject(ctx.aoColumns[i].checkboxes)){\r\n                  ctx.aoColumns[i].checkboxes = {};\r\n               }\r\n\r\n               ctx.aoColumns[i].checkboxes = $.extend(\r\n                  {}, Checkboxes.defaults, ctx.aoColumns[i].checkboxes\r\n               );\r\n\r\n               //\r\n               // OPTIONS\r\n               //\r\n\r\n               var colOptions = {\r\n                  'searchable': false,\r\n                  'orderable': false\r\n               };\r\n\r\n               if(ctx.aoColumns[i].sClass === ''){\r\n                  colOptions['className'] = 'dt-checkboxes-cell';\r\n               } else {\r\n                  colOptions['className'] = ctx.aoColumns[i].sClass + ' dt-checkboxes-cell';\r\n               }\r\n\r\n               if(ctx.aoColumns[i].sWidthOrig === null){\r\n                  colOptions['width'] = '1%';\r\n               }\r\n\r\n               if(ctx.aoColumns[i].mRender === null){\r\n                  colOptions['render'] = function(){\r\n                     return '<input type=\"checkbox\" class=\"dt-checkboxes\" autocomplete=\"off\">';\r\n                  };\r\n               }\r\n\r\n               DataTable.ext.internal._fnColumnOptions(ctx, i, colOptions);\r\n\r\n\r\n               // WORKAROUND: Remove \"sorting\" class\r\n               $colHeader.removeClass('sorting');\r\n\r\n               // WORKAROUND: Detach all event handlers for this column\r\n               $colHeader.off('.dt');\r\n\r\n               // If table has data source other than Ajax\r\n               if(ctx.sAjaxSource === null){\r\n                  // WORKAROUND: Invalidate column data\r\n                  var cells = dt.cells('tr', i);\r\n                  cells.invalidate('data');\r\n\r\n                  // WORKAROUND: Add required class to existing cells\r\n                  $(cells.nodes()).addClass(colOptions['className']);\r\n               }\r\n\r\n\r\n               //\r\n               // DATA\r\n               //\r\n\r\n               // Initialize object holding data for selected checkboxes\r\n               self.s.data[i] = {};\r\n               self.s.dataDisabled[i] = {};\r\n\r\n               // Store column index for easy column selection later\r\n               self.s.columns.push(i);\r\n\r\n\r\n               //\r\n               // CLASSES\r\n               //\r\n\r\n               // If row selection is enabled for this column\r\n               if(ctx.aoColumns[i].checkboxes.selectRow){\r\n\r\n                  // If Select extension is enabled\r\n                  if(ctx._select){\r\n                     hasCheckboxesSelectRow = true;\r\n\r\n                  // Otherwise, if Select extension is not enabled\r\n                  } else {\r\n                     // Disable row selection for this column\r\n                     ctx.aoColumns[i].checkboxes.selectRow = false;\r\n                  }\r\n               }\r\n\r\n               // If \"Select all\" control is enabled\r\n               if(ctx.aoColumns[i].checkboxes.selectAll){\r\n                  // Save previous HTML content\r\n                  $colHeader.data('html', $colHeader.html());\r\n\r\n                  // If \"Select all\" control markup is provided\r\n                  if(ctx.aoColumns[i].checkboxes.selectAllRender !== null){\r\n                     var selectAllHtml = '';\r\n\r\n                     // If \"selectAllRender\" option is a function\r\n                     if($.isFunction(ctx.aoColumns[i].checkboxes.selectAllRender)){\r\n                        selectAllHtml = ctx.aoColumns[i].checkboxes.selectAllRender();\r\n\r\n                     // Otherwise, if \"selectAllRender\" option is a string\r\n                     } else if(typeof ctx.aoColumns[i].checkboxes.selectAllRender === 'string'){\r\n                        selectAllHtml = ctx.aoColumns[i].checkboxes.selectAllRender;\r\n                     }\r\n\r\n                     $colHeader\r\n                        .html(selectAllHtml)\r\n                        .addClass('dt-checkboxes-select-all')\r\n                        .attr('data-col', i);\r\n                  }\r\n               }\r\n            }\r\n         }\r\n\r\n         // If table has at least one checkbox column\r\n         if(hasCheckboxes){\r\n\r\n            // Load previous state\r\n            self.loadState();\r\n\r\n            //\r\n            // EVENT HANDLERS\r\n            //\r\n\r\n            var $table = $(dt.table().node());\r\n            var $tableBody = $(dt.table().body());\r\n            var $tableContainer = $(dt.table().container());\r\n\r\n            // If there is at least one column that has row selection enabled\r\n            if(hasCheckboxesSelectRow){\r\n               $table.addClass('dt-checkboxes-select');\r\n\r\n               // Handle event before row is selected/deselected\r\n               $table.on('user-select.dt.dtCheckboxes', function (e, dt, type, cell , originalEvent){\r\n                  self.onDataTablesUserSelect(e, dt, type, cell , originalEvent);\r\n               });\r\n\r\n               // Handle row select/deselect event\r\n               $table.on('select.dt.dtCheckboxes deselect.dt.dtCheckboxes', function(e, api, type, indexes){\r\n                  self.onDataTablesSelectDeselect(e, type, indexes);\r\n               });\r\n\r\n               // If displaying of Select extension information is enabled\r\n               if(ctx._select.info){\r\n                  // Disable Select extension information display\r\n                  dt.select.info(false);\r\n\r\n                  // Update the table information element with selected item summary\r\n                  //\r\n                  // NOTE: Needed to display correct count of selected rows\r\n                  // when using server-side processing mode\r\n                  $table.on('draw.dt.dtCheckboxes select.dt.dtCheckboxes deselect.dt.dtCheckboxes', function(){\r\n                     self.showInfoSelected();\r\n                  });\r\n               }\r\n            }\r\n\r\n            // Handle table draw event\r\n            $table.on('draw.dt.dtCheckboxes', function(e){\r\n               self.onDataTablesDraw(e);\r\n            });\r\n\r\n            // Handle checkbox click event\r\n            $tableBody.on('click.dtCheckboxes', 'input.dt-checkboxes', function(e){\r\n               self.onClick(e, this);\r\n            });\r\n\r\n            // Handle click on \"Select all\" control\r\n            $tableContainer.on('click.dtCheckboxes', 'thead th.dt-checkboxes-select-all input[type=\"checkbox\"]', function(e){\r\n               self.onClickSelectAll(e, this);\r\n            });\r\n\r\n            // Handle click on heading containing \"Select all\" control\r\n            $tableContainer.on('click.dtCheckboxes', 'thead th.dt-checkboxes-select-all', function() {\r\n               $('input[type=\"checkbox\"]', this).not(':disabled').trigger('click');\r\n            });\r\n\r\n            // If row selection is disabled\r\n            if(!hasCheckboxesSelectRow){\r\n               // Handle click on cell containing checkbox\r\n               $tableContainer.on('click.dtCheckboxes', 'tbody td.dt-checkboxes-cell', function() {\r\n                  $('input[type=\"checkbox\"]', this).not(':disabled').trigger('click');\r\n               });\r\n            }\r\n\r\n            // Handle click on label node in heading containing \"Select all\" control\r\n            // and in cell containing checkbox\r\n            $tableContainer.on('click.dtCheckboxes', 'thead th.dt-checkboxes-select-all label, tbody td.dt-checkboxes-cell label', function(e) {\r\n               // Prevent default behavior\r\n               e.preventDefault();\r\n            });\r\n\r\n            // Handle click on \"Select all\" control in floating fixed header\r\n            $(document).on('click.dtCheckboxes', '.fixedHeader-floating thead th.dt-checkboxes-select-all input[type=\"checkbox\"]', function(e){\r\n               // If FixedHeader is enabled in this instance\r\n               if(ctx._fixedHeader){\r\n                  // If header is floating in this instance\r\n                  if(ctx._fixedHeader.dom['header'].floating){\r\n                     self.onClickSelectAll(e, this);\r\n                  }\r\n               }\r\n            });\r\n\r\n            // Handle click on heading containing \"Select all\" control in floating fixed header\r\n            $(document).on('click.dtCheckboxes', '.fixedHeader-floating thead th.dt-checkboxes-select-all', function() {\r\n               // If FixedHeader is enabled in this instance\r\n               if(ctx._fixedHeader){\r\n                  // If header is floating in this instance\r\n                  if(ctx._fixedHeader.dom['header'].floating){\r\n                     $('input[type=\"checkbox\"]', this).trigger('click');\r\n                  }\r\n               }\r\n            });\r\n\r\n            // Handle table initialization event\r\n            $table.on('init.dt.dtCheckboxes', function(){\r\n               // Use delay to handle initialization event\r\n               // because certain extensions (FixedColumns) are initialized\r\n               // only when initialization event is triggered.\r\n               setTimeout(function(){\r\n                   self.onDataTablesInit();\r\n               }, 0);\r\n            });\r\n\r\n            // Handle state saving event\r\n            $table.on('stateSaveParams.dt.dtCheckboxes', function (e, settings, data) {\r\n               self.onDataTablesStateSave(e, settings, data);\r\n            });\r\n\r\n            // Handle table destroy event\r\n            $table.one('destroy.dt.dtCheckboxes', function(e, settings){\r\n               self.onDataTablesDestroy(e, settings);\r\n            });\r\n         }\r\n      },\r\n\r\n      // Handles DataTables initialization event\r\n      onDataTablesInit: function(){\r\n         var self = this;\r\n         var dt = self.s.dt;\r\n         var ctx = self.s.ctx;\r\n\r\n         // If server-side processing mode is not enabled\r\n         // NOTE: Needed to avoid duplicate call to updateStateCheckboxes() in onDataTablesDraw()\r\n         if(!ctx.oFeatures.bServerSide){\r\n\r\n            // If state saving is enabled\r\n            if(ctx.oFeatures.bStateSave){\r\n               self.updateState();\r\n            }\r\n\r\n            // Handle Ajax request completion event\r\n            // NOTE: Needed to update table state\r\n            // if table is reloaded via ajax.reload() API method\r\n            $(dt.table().node()).on('xhr.dt.dtCheckboxes', function ( e, settings , json, xhr ) {\r\n               self.onDataTablesXhr(e. settings, json, xhr);\r\n            });\r\n         }\r\n      },\r\n\r\n      // Handles DataTables user initiated select event\r\n      onDataTablesUserSelect: function ( e, dt, type, cell /*, originalEvent*/ ){\r\n         var self = this;\r\n\r\n         var cellIdx = cell.index();\r\n         var rowIdx = cellIdx.row;\r\n         var colIdx = self.getSelectRowColIndex();\r\n         var cellData = dt.cell({ row: rowIdx, column: colIdx }).data();\r\n\r\n         // If checkbox in the cell cannot be checked\r\n         if(!self.isCellSelectable(colIdx, cellData)){\r\n            // Prevent row selection\r\n            e.preventDefault();\r\n         }\r\n      },\r\n\r\n      // Handles DataTables row select/deselect event\r\n      onDataTablesSelectDeselect: function(e, type, indexes){\r\n         var self = this;\r\n         var dt = self.s.dt;\r\n\r\n         if(self.s.ignoreSelect){ return; }\r\n\r\n         if(type === 'row'){\r\n            // Get index of the first column that has checkbox and row selection enabled\r\n            var colIdx = self.getSelectRowColIndex();\r\n            if(colIdx !== null){\r\n               var cells = dt.cells(indexes, colIdx);\r\n\r\n               self.updateData(cells, colIdx, (e.type === 'select') ? true : false);\r\n               self.updateCheckbox(cells, colIdx, (e.type === 'select') ? true : false);\r\n               self.updateSelectAll(colIdx);\r\n            }\r\n         }\r\n      },\r\n\r\n      // Handles DataTables state save event\r\n      onDataTablesStateSave: function (e, settings, data) {\r\n         var self = this;\r\n         var ctx = self.s.ctx;\r\n\r\n         // For every column where checkboxes are enabled\r\n         $.each(self.s.columns, function(index, colIdx){\r\n            // If checkbox state saving is enabled\r\n            if(ctx.aoColumns[colIdx].checkboxes.stateSave){\r\n               // If checkboxes state hasn't been saved before\r\n               if(!Object.prototype.hasOwnProperty.call(data, 'checkboxes')){\r\n                  // Initialize array to save checkboxes state for each column\r\n                  data.checkboxes = [];\r\n               }\r\n\r\n               // Save checkboxes state\r\n               data.checkboxes[colIdx] = self.s.data[colIdx];\r\n            }\r\n         });\r\n      },\r\n\r\n      // Handles DataTables destroy event\r\n      onDataTablesDestroy: function(){\r\n         var self = this;\r\n         var dt = self.s.dt;\r\n\r\n         // Get table elements\r\n         var $table = $(dt.table().node());\r\n         var $tableBody = $(dt.table().body());\r\n         var $tableContainer = $(dt.table().container());\r\n\r\n         // Detach event handlers\r\n         $(document).off('click.dtCheckboxes');\r\n         $tableContainer.off('.dtCheckboxes');\r\n         $tableBody.off('.dtCheckboxes');\r\n         $table.off('.dtCheckboxes');\r\n\r\n         // Clear data\r\n         //\r\n         // NOTE: Needed only to reduce memory footprint\r\n         // in case user saves instance of DataTable object.\r\n         self.s.data = {};\r\n         self.s.dataDisabled = {};\r\n\r\n         // Remove added elements\r\n         $('.dt-checkboxes-select-all', $table).each(function(index, el){\r\n            $(el)\r\n               .html($(el).data('html'))\r\n               .removeClass('dt-checkboxes-select-all');\r\n         });\r\n      },\r\n\r\n      // Handles DataTables draw event\r\n      onDataTablesDraw: function(){\r\n         var self = this;\r\n         var ctx = self.s.ctx;\r\n\r\n         // If server-side processing is enabled\r\n         // or deferred render is enabled\r\n         //\r\n         // TODO: it's not optimal to update state of checkboxes\r\n         // for already created rows in deferred rendering mode\r\n         if(ctx.oFeatures.bServerSide || ctx.oFeatures.bDeferRender){\r\n            self.updateStateCheckboxes({ page: 'current', search: 'none' });\r\n         }\r\n\r\n         $.each(self.s.columns, function(index, colIdx){\r\n            self.updateSelectAll(colIdx);\r\n         });\r\n      },\r\n\r\n      // Handles DataTables Ajax request completion event\r\n      onDataTablesXhr: function( /* e, settings , json, xhr */ ){\r\n         var self = this;\r\n         var dt = self.s.dt;\r\n         var ctx = self.s.ctx;\r\n\r\n         // Get table elements\r\n         var $table = $(dt.table().node());\r\n\r\n         // For every column where checkboxes are enabled\r\n         $.each(self.s.columns, function(index, colIdx){\r\n            // Reset data\r\n            self.s.data[colIdx] = {};\r\n            self.s.dataDisabled[colIdx] = {};\r\n         });\r\n\r\n         // If state saving is enabled\r\n         if(ctx.oFeatures.bStateSave){\r\n            // Load previous state\r\n            self.loadState();\r\n\r\n            // Update table state on next redraw\r\n            $table.one('draw.dt.dtCheckboxes', function(){\r\n               self.updateState();\r\n            });\r\n         }\r\n      },\r\n\r\n      // Updates array holding data for selected checkboxes\r\n      updateData: function(cells, colIdx, isSelected){\r\n         var self = this;\r\n         var dt = self.s.dt;\r\n         var ctx = self.s.ctx;\r\n\r\n         // If Checkboxes extension is enabled for this column\r\n         if(ctx.aoColumns[colIdx].checkboxes){\r\n            var cellsData = cells.data();\r\n            cellsData.each(function(cellData){\r\n               // If checkbox is checked\r\n               if(isSelected){\r\n                  ctx.checkboxes.s.data[colIdx][cellData] = 1;\r\n\r\n               // Otherwise, if checkbox is not checked\r\n               } else {\r\n                  delete ctx.checkboxes.s.data[colIdx][cellData];\r\n               }\r\n            });\r\n\r\n            // If state saving is enabled\r\n            if(ctx.oFeatures.bStateSave){\r\n               // If checkbox state saving is enabled\r\n               if(ctx.aoColumns[colIdx].checkboxes.stateSave){\r\n                  // Save state\r\n                  dt.state.save();\r\n               }\r\n            }\r\n         }\r\n      },\r\n\r\n      // Updates row selection\r\n      updateSelect: function(selector, isSelected){\r\n         var self = this;\r\n         var dt = self.s.dt;\r\n         var ctx = self.s.ctx;\r\n\r\n         // If Select extension is enabled\r\n         if(ctx._select){\r\n            // Disable select event hanlder temporarily\r\n            self.s.ignoreSelect = true;\r\n\r\n            if(isSelected){\r\n               dt.rows(selector).select();\r\n            } else {\r\n               dt.rows(selector).deselect();\r\n            }\r\n\r\n            // Re-enable select event handler\r\n            self.s.ignoreSelect = false;\r\n         }\r\n      },\r\n\r\n      // Updates state of single checkbox\r\n      updateCheckbox: function(cells, colIdx, isSelected){\r\n         var self = this;\r\n         var ctx = self.s.ctx;\r\n\r\n         var cellNodes = cells.nodes();\r\n         if(cellNodes.length){\r\n            $('input.dt-checkboxes', cellNodes).not(':disabled').prop('checked', isSelected);\r\n\r\n            // If selectCallback is a function\r\n            if($.isFunction(ctx.aoColumns[colIdx].checkboxes.selectCallback)){\r\n               ctx.aoColumns[colIdx].checkboxes.selectCallback(cellNodes, isSelected);\r\n            }\r\n         }\r\n      },\r\n\r\n      // Update table state\r\n      updateState: function(){\r\n         var self = this;\r\n         var dt = self.s.dt;\r\n         var ctx = self.s.ctx;\r\n\r\n         self.updateStateCheckboxes({ page: 'all', search: 'none' });\r\n\r\n         // If FixedColumns extension is enabled\r\n         if(ctx._oFixedColumns){\r\n            // Use delay to let FixedColumns construct the header\r\n            // before we update the \"Select all\" checkbox\r\n            setTimeout(function(){\r\n               // For every column where checkboxes are enabled\r\n               $.each(self.s.columns, function(index, colIdx){\r\n                  self.updateSelectAll(colIdx);\r\n               });\r\n            }, 0);\r\n         }\r\n      },\r\n\r\n      // Updates state of multiple checkboxes\r\n      updateStateCheckboxes: function(opts){\r\n         var self = this;\r\n         var dt = self.s.dt;\r\n         var ctx = self.s.ctx;\r\n\r\n         // Enumerate all cells\r\n         dt.cells('tr', self.s.columns, opts).every(function(rowIdx, colIdx){\r\n            // Get cell data\r\n            var cellData = this.data();\r\n\r\n            // Determine if checkbox in the cell can be selected\r\n            var isCellSelectable = self.isCellSelectable(colIdx, cellData);\r\n\r\n            // If checkbox is checked\r\n            if(\r\n               Object.prototype.hasOwnProperty.call(ctx.checkboxes.s.data, colIdx)\r\n               && Object.prototype.hasOwnProperty.call(ctx.checkboxes.s.data[colIdx], cellData)\r\n            ) {\r\n               // If row selection is enabled\r\n               // and checkbox can be checked\r\n               if(ctx.aoColumns[colIdx].checkboxes.selectRow && isCellSelectable){\r\n                  self.updateSelect(rowIdx, true);\r\n               }\r\n\r\n               self.updateCheckbox(this, colIdx, true);\r\n            }\r\n\r\n            // If checkbox is disabled\r\n            if(!isCellSelectable){\r\n               $('input.dt-checkboxes', this.node()).prop('disabled', true);\r\n            }\r\n         });\r\n      },\r\n\r\n      // Handles checkbox click event\r\n      onClick: function(e, ctrl){\r\n         var self = this;\r\n         var dt = self.s.dt;\r\n         var ctx = self.s.ctx;\r\n\r\n         var cellSelector;\r\n\r\n         // Get cell\r\n         var $cell = $(ctrl).closest('td');\r\n\r\n         // If cell is in a fixed column using FixedColumns extension\r\n         if($cell.parents('.DTFC_Cloned').length){\r\n            cellSelector = dt.fixedColumns().cellIndex($cell);\r\n\r\n         } else {\r\n            cellSelector = $cell;\r\n         }\r\n\r\n         var cell    = dt.cell(cellSelector);\r\n         var cellIdx = cell.index();\r\n         var colIdx  = cellIdx.column;\r\n         var rowIdx  = cellIdx.row;\r\n\r\n         // If row selection is not enabled\r\n         // NOTE: if row selection is enabled, checkbox selection/deselection\r\n         // would be handled by onDataTablesSelectDeselect event handler instead\r\n         if(!ctx.aoColumns[colIdx].checkboxes.selectRow){\r\n            cell.checkboxes.select(ctrl.checked);\r\n\r\n            // Prevent click event from propagating to parent\r\n            e.stopPropagation();\r\n\r\n         } else {\r\n\r\n            // If Select extension is enabled\r\n            if(ctx._select){\r\n               // If style is set to \"os\"\r\n               if(ctx._select.style === 'os'){\r\n\r\n                  // WORKAROUND:\r\n                  // See https://github.com/gyrocode/jquery-datatables-checkboxes/issues/128\r\n\r\n                  // Prevent click event from propagating to parent\r\n                  e.stopPropagation();\r\n\r\n                  // Select/deselect individual row\r\n                  cell.checkboxes.select(ctrl.checked);\r\n\r\n               // Otherwise, if style is set to other than \"os\"\r\n               } else {\r\n                  // WORKAROUND:\r\n                  // Select extension may keep the row selected\r\n                  // when checkbox is unchecked with SHIFT key.\r\n                  //\r\n                  // We need to update the state of the checkbox AFTER handling\r\n                  // select/deselect event from Select extension.\r\n                  //\r\n                  // Call to setTimeout is needed to let select/deselect event handler\r\n                  // update the data first.\r\n                  setTimeout(function(){\r\n                     // Get cell data\r\n                     var cellData = cell.data();\r\n\r\n                     // Determine whether data is in the list\r\n                     var hasData = (\r\n                        Object.prototype.hasOwnProperty.call(self.s.data, colIdx)\r\n                        && Object.prototype.hasOwnProperty.call(self.s.data[colIdx], cellData)\r\n                     );\r\n\r\n                     // If state of the checkbox needs to be updated\r\n                     if(hasData !== ctrl.checked){\r\n                        self.updateCheckbox(cell, colIdx, hasData);\r\n                        self.updateSelectAll(colIdx);\r\n                     }\r\n                  }, 0);\r\n               }\r\n            }\r\n         }\r\n      },\r\n\r\n      // Handles checkbox click event\r\n      onClickSelectAll: function(e, ctrl){\r\n         var self = this;\r\n         var dt = self.s.dt;\r\n         var ctx = self.s.ctx;\r\n\r\n         // Calculate column index\r\n         var colIdx = null;\r\n         var $th = $(ctrl).closest('th');\r\n\r\n         // If column is fixed using FixedColumns extension\r\n         if($th.parents('.DTFC_Cloned').length){\r\n            var cellIdx = dt.fixedColumns().cellIndex($th);\r\n            colIdx = cellIdx.column;\r\n         } else {\r\n            colIdx = dt.column($th).index();\r\n         }\r\n\r\n         // Indicate that state of \"Select all\" control has been changed\r\n         $(ctrl).data('is-changed', true);\r\n\r\n         dt.column(colIdx, {\r\n            page: (\r\n               (ctx.aoColumns[colIdx].checkboxes && ctx.aoColumns[colIdx].checkboxes.selectAllPages)\r\n                  ? 'all'\r\n                  : 'current'\r\n            ),\r\n            search: 'applied'\r\n         }).checkboxes.select(ctrl.checked);\r\n\r\n         // Prevent click event from propagating to parent\r\n         e.stopPropagation();\r\n      },\r\n\r\n      // Loads previosly saved sate\r\n      loadState: function () {\r\n         var self = this;\r\n         var dt = self.s.dt;\r\n         var ctx = self.s.ctx;\r\n\r\n         // If state saving is enabled\r\n         if(ctx.oFeatures.bStateSave){\r\n            // Retrieve stored state\r\n            var state = dt.state.loaded();\r\n\r\n            // For every column where checkboxes are enabled\r\n            $.each(self.s.columns, function(index, colIdx){\r\n               // If state is loaded and contains data for this column\r\n               if(state && state.checkboxes && state.checkboxes.hasOwnProperty(colIdx)){\r\n                  // If checkbox state saving is enabled\r\n                  if(ctx.aoColumns[colIdx].checkboxes.stateSave){\r\n                     // Load previous state\r\n                     self.s.data[colIdx] = state.checkboxes[colIdx];\r\n                  }\r\n               }\r\n            });\r\n         }\r\n      },\r\n\r\n      // Updates state of the \"Select all\" controls\r\n      updateSelectAll: function(colIdx){\r\n         var self = this;\r\n         var dt = self.s.dt;\r\n         var ctx = self.s.ctx;\r\n\r\n         // If Checkboxes extension is enabled for this column\r\n         // and \"Select all\" control is enabled for this column\r\n         if(ctx.aoColumns[colIdx].checkboxes && ctx.aoColumns[colIdx].checkboxes.selectAll){\r\n            var cells = dt.cells('tr', colIdx, {\r\n               page: (\r\n                  (ctx.aoColumns[colIdx].checkboxes.selectAllPages)\r\n                     ? 'all'\r\n                     : 'current'\r\n               ),\r\n               search: 'applied'\r\n            });\r\n\r\n            var $tableContainer = dt.table().container();\r\n            var $checkboxesSelectAll = $('.dt-checkboxes-select-all[data-col=\"' + colIdx + '\"] input[type=\"checkbox\"]', $tableContainer);\r\n\r\n            var countChecked = 0;\r\n            var countDisabled = 0;\r\n            var cellsData = cells.data();\r\n            $.each(cellsData, function(index, cellData){\r\n               // If checkbox is not disabled\r\n               if(self.isCellSelectable(colIdx, cellData)){\r\n                  if(\r\n                     Object.prototype.hasOwnProperty.call(self.s.data, colIdx)\r\n                     && Object.prototype.hasOwnProperty.call(self.s.data[colIdx], cellData)\r\n                  ) {\r\n                     countChecked++;\r\n                  }\r\n\r\n               // Otherwise, if checkbox is disabled\r\n               } else {\r\n                  countDisabled++;\r\n               }\r\n            });\r\n\r\n            // If FixedHeader is enabled in this instance\r\n            if(ctx._fixedHeader){\r\n               // If header is floating in this instance\r\n               if(ctx._fixedHeader.dom['header'].floating){\r\n                  $checkboxesSelectAll = $('.fixedHeader-floating .dt-checkboxes-select-all[data-col=\"' + colIdx + '\"] input[type=\"checkbox\"]');\r\n               }\r\n            }\r\n\r\n            var isSelected;\r\n            var isIndeterminate;\r\n\r\n            // If none of the checkboxes are checked\r\n            if (countChecked === 0){\r\n               isSelected      = false;\r\n               isIndeterminate = false;\r\n\r\n            // If all of the checkboxes are checked\r\n            } else if ((countChecked + countDisabled) === cellsData.length){\r\n               isSelected      = true;\r\n               isIndeterminate = false;\r\n\r\n            // If some of the checkboxes are checked\r\n            } else {\r\n               isSelected      = true;\r\n               isIndeterminate = true;\r\n            }\r\n\r\n            var isChanged          = $checkboxesSelectAll.data('is-changed');\r\n            var isSelectedNow      = $checkboxesSelectAll.prop('checked');\r\n            var isIndeterminateNow = $checkboxesSelectAll.prop('indeterminate');\r\n\r\n            // If state of \"Select all\" control has been changed\r\n            if(isChanged || isSelectedNow !== isSelected || isIndeterminateNow !== isIndeterminate){\r\n               // Reset \"Select all\" control state flag\r\n               $checkboxesSelectAll.data('is-changed', false);\r\n\r\n               $checkboxesSelectAll.prop({\r\n                  // NOTE: If checkbox has indeterminate state,\r\n                  // \"checked\" property must be set to false.\r\n                  'checked': isIndeterminate ? false : isSelected,\r\n                  'indeterminate': isIndeterminate\r\n               });\r\n\r\n               // If selectAllCallback is a function\r\n               if($.isFunction(ctx.aoColumns[colIdx].checkboxes.selectAllCallback)){\r\n                  ctx.aoColumns[colIdx].checkboxes.selectAllCallback($checkboxesSelectAll.closest('th').get(0), isSelected, isIndeterminate);\r\n               }\r\n            }\r\n         }\r\n      },\r\n\r\n      // Updates the information element of the DataTable showing information about the\r\n      // items selected. Based on info() method of Select extension.\r\n      showInfoSelected: function(){\r\n         var self = this;\r\n         var dt = self.s.dt;\r\n         var ctx = self.s.ctx;\r\n\r\n         if ( ! ctx.aanFeatures.i ) {\r\n            return;\r\n         }\r\n\r\n         // Get index of the first column that has checkbox and row selection enabled\r\n         var colIdx = self.getSelectRowColIndex();\r\n\r\n         // If there is a column that has checkbox and row selection enabled\r\n         if(colIdx !== null){\r\n            // Count number of selected rows\r\n            var countRows = 0;\r\n            for (var cellData in ctx.checkboxes.s.data[colIdx]){\r\n               if(\r\n                  Object.prototype.hasOwnProperty.call(ctx.checkboxes.s.data, colIdx)\r\n                  && Object.prototype.hasOwnProperty.call(ctx.checkboxes.s.data[colIdx], cellData)\r\n               ) {\r\n                  countRows++;\r\n               }\r\n            }\r\n\r\n            var add = function($el, name, num){\r\n               $el.append( $('<span class=\"select-item\"/>').append( dt.i18n(\r\n                  'select.'+name+'s',\r\n                  { _: '%d '+name+'s selected', 0: '', 1: '1 '+name+' selected' },\r\n                  num\r\n               ) ) );\r\n            };\r\n\r\n            // Internal knowledge of DataTables to loop over all information elements\r\n            $.each( ctx.aanFeatures.i, function ( i, el ) {\r\n               var $el = $(el);\r\n\r\n               var $output  = $('<span class=\"select-info\"/>');\r\n               add($output, 'row', countRows);\r\n\r\n               var $existing = $el.children('span.select-info');\r\n               if($existing.length){\r\n                  $existing.remove();\r\n               }\r\n\r\n               if($output.text() !== ''){\r\n                  $el.append($output);\r\n               }\r\n            });\r\n         }\r\n      },\r\n\r\n      // Determines whether checkbox in the cell can be checked\r\n      isCellSelectable: function(colIdx, cellData){\r\n         var self = this;\r\n         var ctx = self.s.ctx;\r\n\r\n         // If data is in the list of disabled elements\r\n         if(\r\n            Object.prototype.hasOwnProperty.call(ctx.checkboxes.s.dataDisabled, colIdx)\r\n            && Object.prototype.hasOwnProperty.call(ctx.checkboxes.s.dataDisabled[colIdx], cellData)\r\n         ) {\r\n            return false;\r\n\r\n         // Otherwise, if checkbox can be selected\r\n         } else {\r\n            return true;\r\n         }\r\n      },\r\n\r\n      // Gets cell index\r\n      getCellIndex: function(cell){\r\n         var self = this;\r\n         var dt = self.s.dt;\r\n         var ctx = self.s.ctx;\r\n\r\n         // If FixedColumns extension is available\r\n         if(ctx._oFixedColumns){\r\n            return dt.fixedColumns().cellIndex(cell);\r\n\r\n         } else {\r\n            return dt.cell(cell).index();\r\n         }\r\n      },\r\n\r\n      // Gets index of the first column that has checkbox and row selection enabled\r\n      getSelectRowColIndex: function(){\r\n         var self = this;\r\n         var ctx = self.s.ctx;\r\n\r\n         var colIdx = null;\r\n\r\n         for(var i = 0; i < ctx.aoColumns.length; i++){\r\n            // If Checkboxes extension is enabled\r\n            // and row selection is enabled for this column\r\n            if(ctx.aoColumns[i].checkboxes && ctx.aoColumns[i].checkboxes.selectRow){\r\n               colIdx = i;\r\n               break;\r\n            }\r\n         }\r\n\r\n         return colIdx;\r\n      },\r\n\r\n      // Updates fixed column if FixedColumns extension is enabled\r\n      // and given column is inside a fixed column\r\n      updateFixedColumn: function(colIdx){\r\n         var self = this;\r\n         var dt = self.s.dt;\r\n         var ctx = self.s.ctx;\r\n\r\n         // If FixedColumns extension is enabled\r\n         if(ctx._oFixedColumns){\r\n            var leftCols = ctx._oFixedColumns.s.iLeftColumns;\r\n            var rightCols = ctx.aoColumns.length - ctx._oFixedColumns.s.iRightColumns - 1;\r\n\r\n            if (colIdx < leftCols || colIdx > rightCols){\r\n               // Update the data shown in the fixed column\r\n               dt.fixedColumns().update();\r\n\r\n               // Use delay to let FixedColumns construct the header\r\n               // before we update the \"Select all\" checkbox\r\n               setTimeout(function(){\r\n                  // For every column where checkboxes are enabled\r\n                  $.each(self.s.columns, function(index, colIdx){\r\n                     self.updateSelectAll(colIdx);\r\n                  });\r\n               }, 0);\r\n            }\r\n         }\r\n      }\r\n   };\r\n\r\n\r\n   /**\r\n   * Checkboxes default settings for initialisation\r\n   *\r\n   * @namespace\r\n   * @name Checkboxes.defaults\r\n   * @static\r\n   */\r\n   Checkboxes.defaults = {\r\n      /**\r\n      * Enable / disable checkbox state loading/saving if state saving is enabled globally\r\n      *\r\n      * @type {Boolean}\r\n      * @default `true`\r\n      */\r\n      stateSave: true,\r\n\r\n      /**\r\n      * Enable / disable row selection\r\n      *\r\n      * @type {Boolean}\r\n      * @default `false`\r\n      */\r\n      selectRow: false,\r\n\r\n      /**\r\n      * Enable / disable \"select all\" control in the header\r\n      *\r\n      * @type {Boolean}\r\n      * @default `true`\r\n      */\r\n      selectAll: true,\r\n\r\n      /**\r\n      * Enable / disable ability to select checkboxes from all pages\r\n      *\r\n      * @type {Boolean}\r\n      * @default `true`\r\n      */\r\n      selectAllPages: true,\r\n\r\n      /**\r\n      * Checkbox select/deselect callback\r\n      *\r\n      * @type {Function}\r\n      * @default  `null`\r\n      */\r\n      selectCallback: null,\r\n\r\n      /**\r\n      * \"Select all\" control select/deselect callback\r\n      *\r\n      * @type {Function}\r\n      * @default  `null`\r\n      */\r\n      selectAllCallback: null,\r\n\r\n      /**\r\n      * \"Select all\" control markup\r\n      *\r\n      * @type {mixed}\r\n      * @default `<input type=\"checkbox\">`\r\n      */\r\n      selectAllRender: '<input type=\"checkbox\" autocomplete=\"off\">'\r\n   };\r\n\r\n\r\n   /*\r\n   * API\r\n   */\r\n   var Api = $.fn.dataTable.Api;\r\n\r\n   // Doesn't do anything - work around for a bug in DT... Not documented\r\n   Api.register( 'checkboxes()', function () {\r\n      return this;\r\n   } );\r\n\r\n   Api.registerPlural( 'columns().checkboxes.select()', 'column().checkboxes.select()', function ( state ) {\r\n      if(typeof state === 'undefined'){ state = true; }\r\n\r\n      return this.iterator( 'column-rows', function ( ctx, colIdx, i, j, rowsIdx ) {\r\n         // If Checkboxes extension is enabled for this column\r\n         if(ctx.aoColumns[colIdx].checkboxes){\r\n            // Prepare a list of all cells\r\n            var selector = [];\r\n            $.each(rowsIdx, function(index, rowIdx){\r\n               selector.push({ row: rowIdx, column: colIdx });\r\n            });\r\n\r\n            var cells = this.cells(selector);\r\n            var cellsData = cells.data();\r\n\r\n            // Prepare a list of cells that contain checkboxes that can be selected\r\n            var rowsSelectableIdx = [];\r\n            selector = [];\r\n            $.each(cellsData, function(index, cellData){\r\n               // If checkbox in the cell can be selected\r\n               if(ctx.checkboxes.isCellSelectable(colIdx, cellData)){\r\n                  selector.push({ row: rowsIdx[index], column: colIdx });\r\n                  rowsSelectableIdx.push(rowsIdx[index]);\r\n               }\r\n            });\r\n\r\n            cells = this.cells(selector);\r\n\r\n            ctx.checkboxes.updateData(cells, colIdx, state);\r\n\r\n            // If row selection is enabled\r\n            if(ctx.aoColumns[colIdx].checkboxes.selectRow){\r\n               ctx.checkboxes.updateSelect(rowsSelectableIdx, state);\r\n            }\r\n\r\n            ctx.checkboxes.updateCheckbox(cells, colIdx, state);\r\n\r\n            ctx.checkboxes.updateSelectAll(colIdx);\r\n\r\n            ctx.checkboxes.updateFixedColumn(colIdx);\r\n         }\r\n      }, 1 );\r\n   } );\r\n\r\n   Api.registerPlural( 'cells().checkboxes.select()', 'cell().checkboxes.select()', function ( state ) {\r\n      if(typeof state === 'undefined'){ state = true; }\r\n\r\n      return this.iterator( 'cell', function ( ctx, rowIdx, colIdx ) {\r\n         // If Checkboxes extension is enabled for this column\r\n         if(ctx.aoColumns[colIdx].checkboxes){\r\n            var cells = this.cells([{ row: rowIdx, column: colIdx }]);\r\n            var cellData = this.cell({ row: rowIdx, column: colIdx }).data();\r\n\r\n            // If checkbox in the cell can be selected\r\n            if(ctx.checkboxes.isCellSelectable(colIdx, cellData)){\r\n               ctx.checkboxes.updateData(cells, colIdx, state);\r\n\r\n               // If row selection is enabled\r\n               if(ctx.aoColumns[colIdx].checkboxes.selectRow){\r\n                  ctx.checkboxes.updateSelect(rowIdx, state);\r\n               }\r\n\r\n               ctx.checkboxes.updateCheckbox(cells, colIdx, state);\r\n\r\n               ctx.checkboxes.updateSelectAll(colIdx);\r\n\r\n               ctx.checkboxes.updateFixedColumn(colIdx);\r\n            }\r\n         }\r\n      }, 1 );\r\n   } );\r\n\r\n   Api.registerPlural( 'cells().checkboxes.enable()', 'cell().checkboxes.enable()', function ( state ) {\r\n      if(typeof state === 'undefined'){ state = true; }\r\n\r\n      return this.iterator( 'cell', function ( ctx, rowIdx, colIdx ) {\r\n         // If Checkboxes extension is enabled for this column\r\n         if(ctx.aoColumns[colIdx].checkboxes){\r\n            var cell = this.cell({ row: rowIdx, column: colIdx });\r\n\r\n            // Get cell data\r\n            var cellData = cell.data();\r\n\r\n            // If checkbox should be enabled\r\n            if(state){\r\n               delete ctx.checkboxes.s.dataDisabled[colIdx][cellData];\r\n\r\n            // Otherwise, if checkbox should be disabled\r\n            } else {\r\n               ctx.checkboxes.s.dataDisabled[colIdx][cellData] = 1;\r\n            }\r\n\r\n            // Determine if cell node is available\r\n            // (deferRender is not enabled or cell has been already created)\r\n            var cellNode = cell.node();\r\n            if(cellNode){\r\n               $('input.dt-checkboxes', cellNode).prop('disabled', !state);\r\n            }\r\n\r\n            // If row selection is enabled\r\n            // and checkbox can be checked\r\n            if(ctx.aoColumns[colIdx].checkboxes.selectRow){\r\n               // If data is in the list\r\n               if(\r\n                  Object.prototype.hasOwnProperty.call(ctx.checkboxes.s.data, colIdx)\r\n                  && Object.prototype.hasOwnProperty.call(ctx.checkboxes.s.data[colIdx], cellData)\r\n               ) {\r\n                  // Update selection based on current state:\r\n                  // if checkbox is enabled then select row;\r\n                  // otherwise, deselect row\r\n                  ctx.checkboxes.updateSelect(rowIdx, state);\r\n               }\r\n            }\r\n         }\r\n      }, 1 );\r\n   } );\r\n\r\n   Api.registerPlural( 'cells().checkboxes.disable()', 'cell().checkboxes.disable()', function ( state ) {\r\n      if(typeof state === 'undefined'){ state = true; }\r\n      return this.checkboxes.enable(!state);\r\n   } );\r\n\r\n   Api.registerPlural( 'columns().checkboxes.deselect()', 'column().checkboxes.deselect()', function ( state ) {\r\n      if(typeof state === 'undefined'){ state = true; }\r\n      return this.checkboxes.select(!state);\r\n   } );\r\n\r\n   Api.registerPlural( 'cells().checkboxes.deselect()', 'cell().checkboxes.deselect()', function ( state ) {\r\n      if(typeof state === 'undefined'){ state = true; }\r\n      return this.checkboxes.select(!state);\r\n   } );\r\n\r\n   Api.registerPlural( 'columns().checkboxes.deselectAll()', 'column().checkboxes.deselectAll()', function () {\r\n      return this.iterator( 'column', function (ctx, colIdx){\r\n         // If Checkboxes extension is enabled for this column\r\n         if(ctx.aoColumns[colIdx].checkboxes){\r\n            ctx.checkboxes.s.data[colIdx] = {};\r\n\r\n            this.column(colIdx).checkboxes.select(false);\r\n         }\r\n      }, 1 );\r\n   } );\r\n\r\n   Api.registerPlural( 'columns().checkboxes.selected()', 'column().checkboxes.selected()', function () {\r\n      return this.iterator( 'column-rows', function ( ctx, colIdx, i, j, rowsIdx ) {\r\n\r\n         // If Checkboxes extension is enabled for this column\r\n         if(ctx.aoColumns[colIdx].checkboxes){\r\n            var data = [];\r\n\r\n            // If server-side processing mode is enabled\r\n            if(ctx.oFeatures.bServerSide){\r\n               $.each(ctx.checkboxes.s.data[colIdx], function(cellData){\r\n                  // If checkbox in the cell can be checked\r\n                  if(ctx.checkboxes.isCellSelectable(colIdx, cellData)){\r\n                     data.push(cellData);\r\n                  }\r\n               });\r\n\r\n            // Otherwise, if server-side processing mode is not enabled\r\n            } else {\r\n               // Prepare a list of all cells\r\n               var selector = [];\r\n               $.each(rowsIdx, function(index, rowIdx){\r\n                  selector.push({ row: rowIdx, column: colIdx });\r\n               });\r\n\r\n               // Get all cells data\r\n               var cells = this.cells(selector);\r\n               var cellsData = cells.data();\r\n\r\n               // Enumerate all cells data\r\n               $.each(cellsData, function(index, cellData){\r\n                  // If checkbox is checked\r\n                  if(\r\n                     Object.prototype.hasOwnProperty.call(ctx.checkboxes.s.data, colIdx)\r\n                     && Object.prototype.hasOwnProperty.call(ctx.checkboxes.s.data[colIdx], cellData)\r\n                  ) {\r\n                     // If checkbox in the cell can be selected\r\n                     if(ctx.checkboxes.isCellSelectable(colIdx, cellData)){\r\n                        data.push(cellData);\r\n                     }\r\n                  }\r\n               });\r\n            }\r\n\r\n            return data;\r\n\r\n         } else {\r\n            return [];\r\n         }\r\n      }, 1 );\r\n   } );\r\n\r\n\r\n   /**\r\n    * Version information\r\n    *\r\n    * @name Checkboxes.version\r\n    * @static\r\n    */\r\n   Checkboxes.version = '1.2.14';\r\n\r\n\r\n\r\n   $.fn.DataTable.Checkboxes = Checkboxes;\r\n   $.fn.dataTable.Checkboxes = Checkboxes;\r\n\r\n\r\n   // Attach a listener to the document which listens for DataTables initialisation\r\n   // events so we can automatically initialise\r\n   $(document).on( 'preInit.dt.dtCheckboxes', function (e, settings /*, json */ ) {\r\n      if ( e.namespace !== 'dt' ) {\r\n         return;\r\n      }\r\n\r\n      new Checkboxes( settings );\r\n   } );\r\n\r\n\r\n   return Checkboxes;\r\n}));\r\n"],
  "mappings": "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",
  "names": ["window", "document", "dt", "colIdx"]
}
